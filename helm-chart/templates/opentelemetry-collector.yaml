{{- if .Values.opentelemetryCollector.create }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.opentelemetryCollector.name }}
  namespace: {{ .Values.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.opentelemetryCollector.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.opentelemetryCollector.name }}
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      {{- if eq .Values.opentelemetryCollector.projectId "PROJECT_ID" }}
      initContainers:
      # Init container retrieves the current cloud project id from the metadata server
      # and inserts it into the collector config template
      # https://cloud.google.com/compute/docs/storing-retrieving-metadata
      - name: otel-gateway-init
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
        image: busybox:latest@sha256:c118f538365369207c12e5794c3cbfb7b042d950af590ae6c287ede74f29b7d4
        command:
        - '/bin/sh'
        - '-c'
        - |
           sed "s/PROJECT_ID/$(curl -H 'Metadata-Flavor: Google' http://metadata.google.internal/computeMetadata/v1/project/project-id)/" /template/collector-gateway-config-template.yaml >> /conf/collector-gateway-config.yaml
        volumeMounts:
        - name: collector-gateway-config-template
          mountPath: /template
        - name: collector-gateway-config
          mountPath: /conf
      {{- end }}
      containers:
      # This gateway container will receive traces and metrics from each microservice
      # and forward it to GCP
      - name: otel-gateway
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
        args:
        - --config=/conf/collector-gateway-config.yaml
        image: otel/opentelemetry-collector-contrib:0.73.0@sha256:a31b99188636a30a488ee8f1c2b919ec9c98359a008651284e794acfa419493a
        volumeMounts:
        - name: collector-gateway-config
          mountPath: /conf
      volumes:
      # Simple ConfigMap volume with template file
      - name: collector-gateway-config-template
        configMap:
          items:
          - key: collector-gateway-config-template.yaml
            path: collector-gateway-config-template.yaml
          name: collector-gateway-config-template
      # Create a volume to store the expanded template (with correct cloud project ID)
      - name: collector-gateway-config
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.opentelemetryCollector.name }}
  namespace: {{ .Values.Namespace }}
spec:
  ports:
  - name: grpc-otlp
    port: 4317
    protocol: TCP
    targetPort: 4317
  selector:
    app: {{ .Values.opentelemetryCollector.name }}
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: collector-gateway-config-template
  namespace: {{ .Values.Namespace }}
# Open Telemetry Collector config
# https://opentelemetry.io/docs/collector/configuration/
data:
  collector-gateway-config-template.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
    processors:
    exporters:
      googlecloud:
        project: {{ .Values.opentelemetryCollector.projectId | quote }}
    service:
      pipelines:
        traces:
          receivers: [otlp] # Receive otlp-formatted data from other collector instances
          processors: []
          exporters: [googlecloud] # Export traces directly to Google Cloud
        metrics:
          receivers: [otlp]
          processors: []
          exporters: [googlecloud] # Export metrics to Google Cloud
{{- end }}
